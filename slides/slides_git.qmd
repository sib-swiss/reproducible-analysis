---
title: "3. Introduction to git, GitHub and GitHub pages"
subtitle: "Getting started with git for version control"
author: "Geert van Geest"
date: "2023-06-16"
engine: knitr
format:
  revealjs:
    theme: default
    slide-number: true
    preview-links: auto
    link-external-newwindow: true
---

## Versions

::: incremental
-   final_version.docx 🎉

-   final_version_corrected_additional_comments_supervisor1.docx

-   final_version_corrected_additional_comments_supervisor2.docx

-   final_version_tookmehourstocombineallcomments.docx 🤯

-   final_version_corrected.docx

-   ..
:::

## Take control of your versions!

-   Dare to break stuff ➡️ go back to any previous version
-   Define and describe changes
-   Combine versions and suggested changes by pull requests and merging

```{mermaid}
flowchart LR
  A(first version) --> B(some changes)
  B --> C(Something experimental)
  B --> D(Bug fix)
  C --> E(Merge)
  D --> E
  
  linkStyle 1,3 stroke:red;
```

## Using git for version control

-   At the level of a directory, typically a project
-   Everything needed for version control is in `.git/`
-   **Commit**: building block -\> defined step through versions
-   **Branch**:
    -   independent sequence of commits
    -   typically merged with a main branch after work is done

```{mermaid}
flowchart LR
  A(first version) --commit--> B(some changes)
  B --new branch--> C(Something experimental)
  B --commit--> D(Bug fix)
  C --> E((Merge commit))
  D --> E
  
  linkStyle 1,3 stroke:red;
```

## Committing changes - 2 steps!

1.  Stage: Pick files with changes or files to be tracked

`git add index.qmd`

2.  Commit: Create a new 'version' with a good description

`git commit -m "Adds a paragraph"`

::: callout-tip
### Stage and commit in one command:

`git commit -am "Adds a paragraph"`
:::

## Project status

-   Overview of changes and staged files in workdirectory:

`git status`

-   Get overview of commits with their hashes:

`git log --oneline`

## Undoing changes

-   Remove unstaged changes:

`git restore index.qmd`

-   Retrieve a file version after a commit (unstaged in working directory):

`git restore --source fa4f3deac index.qmd`

-   Reset commits:

`git reset [--soft|--hard|--mixed] fa4f3deac`

## Collaborating with git

-   Sync with a remote (e.g. on GitHub)

-   All commits are associated with a user

-   If you're collaborating:

    -   Make sure to sync with the remote regularly (`git pull` + `git push`)

    -   Work with branches

## Creating a remote repository

-   Create an empty repository on GitHub

-   Link your local repository to the created repository:

`git remote origin https://github.com/OWNER/REPOSITORY.git`

-   Push your local repository to the remote:

`git push -u origin main`

## Ignoring files

-   `.gitignore` enables you to **not** version control files, e.g.:
    -   output files
    -   user-specific files
-   For a typical quarto project, that would be e.g.:
    -   `_site/`
    -   `.Rproj.user`

## Tags and releases

-   Tag a special commit

-   Typically this is done to create versions, e.g. `v1.0.0`

-   With `git tag` or creating a release in GitHub

-   For Zenodo: a DOI is linked to a release

```{mermaid}
flowchart LR
  A(commit 1) --> B(commit 2)
  B --> C(commit 3)
  C --> D("commit 4 
        tag:v1.0.0")
  D --> E(commit 5)
  
  style D fill:#f9f,stroke:#333,stroke-width:4px
```

## Quarto and GitHub

-   Work in the `main` branch - contains the source files

-   Use `quarto publish gh-pages` to:

    -   Create a branch called `gh-pages` and push the rendered html files

    -   Tell GitHub to use the files in `gh-pages` to host it as a website

-   Find your website at OWNER.github.io/REPOSITORY 🚀

## Quarto and GitHub actions

-   GitHub actions: computations running on the GitHub server that can be triggered by e.g. a push, merge, cron job etc.

-   Let GitHub actions render the content - ultimate reproducibility but:

    -   Need to define your environment (all required R packages etc.)

    -   Requires knowledge on the GitHub actions syntax and concepts

::: aside
More info at the [quarto docs](https://quarto.org/docs/publishing/github-pages.html#github-action)
:::

## More git

-   Spend time to learn it! You'll earn it back quickly 💸
-   Nice resources:
    -   [Happy git with R](https://happygitwithr.com/)
    -   [Carpentries course on git](http://swcarpentry.github.io/git-novice/)
-   If you're new (or smart) use a git client, e.g.:
    -   Rstudio git interface
    -   [GitKraken](https://www.gitkraken.com/)
    -   [GitHub Desktop](https://desktop.github.com)
